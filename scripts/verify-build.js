import fs from 'fs';
import path from 'path';

// Verify critical files exist
const criticalFiles = [
  'dist/index.html',
  'dist/manifest.json',
  'dist/assets',
  'dist/icon-192.png',
  'dist/icon-512.png',
  'dist/icon.svg'
];

console.log('üîç Verifying build output...\n');

let hasErrors = false;

criticalFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.error(`‚ùå Missing critical file: ${file}`);
    hasErrors = true;
  }
});

// Check if index.html contains proper meta tags
if (fs.existsSync('dist/index.html')) {
  const indexContent = fs.readFileSync('dist/index.html', 'utf-8');
  
  const checks = [
    { name: 'PWA Manifest Link', pattern: /manifest\.json/ },
    { name: 'Viewport Meta', pattern: /viewport/ },
    { name: 'Theme Color', pattern: /theme-color/ },
    { name: 'Apple Mobile Web App', pattern: /apple-mobile-web-app/ },
    { name: 'Root Element', pattern: /<div id="root">/ }
  ];
  
  console.log('\nüîç Checking index.html content...');
  checks.forEach(check => {
    if (check.pattern.test(indexContent)) {
      console.log(`‚úÖ ${check.name}`);
    } else {
      console.error(`‚ùå Missing: ${check.name}`);
      hasErrors = true;
    }
  });
}

// Check manifest.json
if (fs.existsSync('dist/manifest.json')) {
  try {
    const manifest = JSON.parse(fs.readFileSync('dist/manifest.json', 'utf-8'));
    console.log('\nüîç Checking manifest.json...');
    
    const manifestChecks = [
      { name: 'Name', key: 'name' },
      { name: 'Short Name', key: 'short_name' },
      { name: 'Start URL', key: 'start_url' },
      { name: 'Display Mode', key: 'display' },
      { name: 'Icons Array', key: 'icons' }
    ];
    
    manifestChecks.forEach(check => {
      if (manifest[check.key]) {
        console.log(`‚úÖ ${check.name}: ${check.key === 'icons' ? `${manifest[check.key].length} icons` : manifest[check.key]}`);
      } else {
        console.error(`‚ùå Missing manifest property: ${check.name}`);
        hasErrors = true;
      }
    });
  } catch (error) {
    console.error('‚ùå Invalid manifest.json:', error.message);
    hasErrors = true;
  }
}

// Check for service worker
const swFile = 'dist/sw.js';
if (fs.existsSync(swFile)) {
  console.log('\n‚úÖ Service Worker found');
} else {
  console.log('\n‚ö†Ô∏è  Service Worker not found (will be generated by vite-plugin-pwa)');
}

// Check bundle size
if (fs.existsSync('dist/assets')) {
  const assets = fs.readdirSync('dist/assets');
  const jsFiles = assets.filter(file => file.endsWith('.js'));
  const cssFiles = assets.filter(file => file.endsWith('.css'));
  
  console.log(`\nüì¶ Build assets:`);
  console.log(`   JS files: ${jsFiles.length}`);
  console.log(`   CSS files: ${cssFiles.length}`);
  console.log(`   Total assets: ${assets.length}`);
}

console.log('\n' + '='.repeat(50));

if (hasErrors) {
  console.error('‚ùå Build verification FAILED');
  console.error('Please fix the issues above before deploying.');
  process.exit(1);
} else {
  console.log('‚úÖ Build verification PASSED');
  console.log('Your build is ready for deployment!');
}

// Additional deployment tips
console.log('\nüí° Deployment Tips:');
console.log('   ‚Ä¢ Ensure your server serves index.html for all routes');
console.log('   ‚Ä¢ Verify HTTPS is enabled (required for PWA)');
console.log('   ‚Ä¢ Test PWA installation on mobile devices');
console.log('   ‚Ä¢ Clear browser cache when testing');
console.log('   ‚Ä¢ Check service worker registration in DevTools'); 